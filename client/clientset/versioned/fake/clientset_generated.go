/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	clientset "kubeform.dev/provider-hcloud-api/client/clientset/versioned"
	certificatev1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/certificate/v1alpha1"
	fakecertificatev1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/certificate/v1alpha1/fake"
	firewallv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/firewall/v1alpha1"
	fakefirewallv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/firewall/v1alpha1/fake"
	floatingv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/floating/v1alpha1"
	fakefloatingv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/floating/v1alpha1/fake"
	loadv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/load/v1alpha1"
	fakeloadv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/load/v1alpha1/fake"
	managedv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/managed/v1alpha1"
	fakemanagedv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/managed/v1alpha1/fake"
	networkv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/network/v1alpha1"
	fakenetworkv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/network/v1alpha1/fake"
	rdnsv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/rdns/v1alpha1"
	fakerdnsv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/rdns/v1alpha1/fake"
	serverv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/server/v1alpha1"
	fakeserverv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/server/v1alpha1/fake"
	snapshotv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/snapshot/v1alpha1"
	fakesnapshotv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/snapshot/v1alpha1/fake"
	sshv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/ssh/v1alpha1"
	fakesshv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/ssh/v1alpha1/fake"
	uploadedv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/uploaded/v1alpha1"
	fakeuploadedv1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/uploaded/v1alpha1/fake"
	volumev1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/volume/v1alpha1"
	fakevolumev1alpha1 "kubeform.dev/provider-hcloud-api/client/clientset/versioned/typed/volume/v1alpha1/fake"

	"k8s.io/apimachinery/pkg/runtime"
	"k8s.io/apimachinery/pkg/watch"
	"k8s.io/client-go/discovery"
	fakediscovery "k8s.io/client-go/discovery/fake"
	"k8s.io/client-go/testing"
)

// NewSimpleClientset returns a clientset that will respond with the provided objects.
// It's backed by a very simple object tracker that processes creates, updates and deletions as-is,
// without applying any validations and/or defaults. It shouldn't be considered a replacement
// for a real clientset and is mostly useful in simple unit tests.
func NewSimpleClientset(objects ...runtime.Object) *Clientset {
	o := testing.NewObjectTracker(scheme, codecs.UniversalDecoder())
	for _, obj := range objects {
		if err := o.Add(obj); err != nil {
			panic(err)
		}
	}

	cs := &Clientset{tracker: o}
	cs.discovery = &fakediscovery.FakeDiscovery{Fake: &cs.Fake}
	cs.AddReactor("*", "*", testing.ObjectReaction(o))
	cs.AddWatchReactor("*", func(action testing.Action) (handled bool, ret watch.Interface, err error) {
		gvr := action.GetResource()
		ns := action.GetNamespace()
		watch, err := o.Watch(gvr, ns)
		if err != nil {
			return false, nil, err
		}
		return true, watch, nil
	})

	return cs
}

// Clientset implements clientset.Interface. Meant to be embedded into a
// struct to get a default implementation. This makes faking out just the method
// you want to test easier.
type Clientset struct {
	testing.Fake
	discovery *fakediscovery.FakeDiscovery
	tracker   testing.ObjectTracker
}

func (c *Clientset) Discovery() discovery.DiscoveryInterface {
	return c.discovery
}

func (c *Clientset) Tracker() testing.ObjectTracker {
	return c.tracker
}

var _ clientset.Interface = &Clientset{}

// CertificateV1alpha1 retrieves the CertificateV1alpha1Client
func (c *Clientset) CertificateV1alpha1() certificatev1alpha1.CertificateV1alpha1Interface {
	return &fakecertificatev1alpha1.FakeCertificateV1alpha1{Fake: &c.Fake}
}

// FirewallV1alpha1 retrieves the FirewallV1alpha1Client
func (c *Clientset) FirewallV1alpha1() firewallv1alpha1.FirewallV1alpha1Interface {
	return &fakefirewallv1alpha1.FakeFirewallV1alpha1{Fake: &c.Fake}
}

// FloatingV1alpha1 retrieves the FloatingV1alpha1Client
func (c *Clientset) FloatingV1alpha1() floatingv1alpha1.FloatingV1alpha1Interface {
	return &fakefloatingv1alpha1.FakeFloatingV1alpha1{Fake: &c.Fake}
}

// LoadV1alpha1 retrieves the LoadV1alpha1Client
func (c *Clientset) LoadV1alpha1() loadv1alpha1.LoadV1alpha1Interface {
	return &fakeloadv1alpha1.FakeLoadV1alpha1{Fake: &c.Fake}
}

// ManagedV1alpha1 retrieves the ManagedV1alpha1Client
func (c *Clientset) ManagedV1alpha1() managedv1alpha1.ManagedV1alpha1Interface {
	return &fakemanagedv1alpha1.FakeManagedV1alpha1{Fake: &c.Fake}
}

// NetworkV1alpha1 retrieves the NetworkV1alpha1Client
func (c *Clientset) NetworkV1alpha1() networkv1alpha1.NetworkV1alpha1Interface {
	return &fakenetworkv1alpha1.FakeNetworkV1alpha1{Fake: &c.Fake}
}

// RdnsV1alpha1 retrieves the RdnsV1alpha1Client
func (c *Clientset) RdnsV1alpha1() rdnsv1alpha1.RdnsV1alpha1Interface {
	return &fakerdnsv1alpha1.FakeRdnsV1alpha1{Fake: &c.Fake}
}

// ServerV1alpha1 retrieves the ServerV1alpha1Client
func (c *Clientset) ServerV1alpha1() serverv1alpha1.ServerV1alpha1Interface {
	return &fakeserverv1alpha1.FakeServerV1alpha1{Fake: &c.Fake}
}

// SnapshotV1alpha1 retrieves the SnapshotV1alpha1Client
func (c *Clientset) SnapshotV1alpha1() snapshotv1alpha1.SnapshotV1alpha1Interface {
	return &fakesnapshotv1alpha1.FakeSnapshotV1alpha1{Fake: &c.Fake}
}

// SshV1alpha1 retrieves the SshV1alpha1Client
func (c *Clientset) SshV1alpha1() sshv1alpha1.SshV1alpha1Interface {
	return &fakesshv1alpha1.FakeSshV1alpha1{Fake: &c.Fake}
}

// UploadedV1alpha1 retrieves the UploadedV1alpha1Client
func (c *Clientset) UploadedV1alpha1() uploadedv1alpha1.UploadedV1alpha1Interface {
	return &fakeuploadedv1alpha1.FakeUploadedV1alpha1{Fake: &c.Fake}
}

// VolumeV1alpha1 retrieves the VolumeV1alpha1Client
func (c *Clientset) VolumeV1alpha1() volumev1alpha1.VolumeV1alpha1Interface {
	return &fakevolumev1alpha1.FakeVolumeV1alpha1{Fake: &c.Fake}
}
