/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-hcloud-api/apis/load/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BalancerServiceLister helps list BalancerServices.
// All objects returned here must be treated as read-only.
type BalancerServiceLister interface {
	// List lists all BalancerServices in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BalancerService, err error)
	// BalancerServices returns an object that can list and get BalancerServices.
	BalancerServices(namespace string) BalancerServiceNamespaceLister
	BalancerServiceListerExpansion
}

// balancerServiceLister implements the BalancerServiceLister interface.
type balancerServiceLister struct {
	indexer cache.Indexer
}

// NewBalancerServiceLister returns a new BalancerServiceLister.
func NewBalancerServiceLister(indexer cache.Indexer) BalancerServiceLister {
	return &balancerServiceLister{indexer: indexer}
}

// List lists all BalancerServices in the indexer.
func (s *balancerServiceLister) List(selector labels.Selector) (ret []*v1alpha1.BalancerService, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BalancerService))
	})
	return ret, err
}

// BalancerServices returns an object that can list and get BalancerServices.
func (s *balancerServiceLister) BalancerServices(namespace string) BalancerServiceNamespaceLister {
	return balancerServiceNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BalancerServiceNamespaceLister helps list and get BalancerServices.
// All objects returned here must be treated as read-only.
type BalancerServiceNamespaceLister interface {
	// List lists all BalancerServices in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BalancerService, err error)
	// Get retrieves the BalancerService from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BalancerService, error)
	BalancerServiceNamespaceListerExpansion
}

// balancerServiceNamespaceLister implements the BalancerServiceNamespaceLister
// interface.
type balancerServiceNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BalancerServices in the indexer for a given namespace.
func (s balancerServiceNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BalancerService, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BalancerService))
	})
	return ret, err
}

// Get retrieves the BalancerService from the indexer for a given namespace and name.
func (s balancerServiceNamespaceLister) Get(name string) (*v1alpha1.BalancerService, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("balancerservice"), name)
	}
	return obj.(*v1alpha1.BalancerService), nil
}
