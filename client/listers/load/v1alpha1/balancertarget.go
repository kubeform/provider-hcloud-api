/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-hcloud-api/apis/load/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// BalancerTargetLister helps list BalancerTargets.
// All objects returned here must be treated as read-only.
type BalancerTargetLister interface {
	// List lists all BalancerTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BalancerTarget, err error)
	// BalancerTargets returns an object that can list and get BalancerTargets.
	BalancerTargets(namespace string) BalancerTargetNamespaceLister
	BalancerTargetListerExpansion
}

// balancerTargetLister implements the BalancerTargetLister interface.
type balancerTargetLister struct {
	indexer cache.Indexer
}

// NewBalancerTargetLister returns a new BalancerTargetLister.
func NewBalancerTargetLister(indexer cache.Indexer) BalancerTargetLister {
	return &balancerTargetLister{indexer: indexer}
}

// List lists all BalancerTargets in the indexer.
func (s *balancerTargetLister) List(selector labels.Selector) (ret []*v1alpha1.BalancerTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BalancerTarget))
	})
	return ret, err
}

// BalancerTargets returns an object that can list and get BalancerTargets.
func (s *balancerTargetLister) BalancerTargets(namespace string) BalancerTargetNamespaceLister {
	return balancerTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// BalancerTargetNamespaceLister helps list and get BalancerTargets.
// All objects returned here must be treated as read-only.
type BalancerTargetNamespaceLister interface {
	// List lists all BalancerTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.BalancerTarget, err error)
	// Get retrieves the BalancerTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.BalancerTarget, error)
	BalancerTargetNamespaceListerExpansion
}

// balancerTargetNamespaceLister implements the BalancerTargetNamespaceLister
// interface.
type balancerTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all BalancerTargets in the indexer for a given namespace.
func (s balancerTargetNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.BalancerTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.BalancerTarget))
	})
	return ret, err
}

// Get retrieves the BalancerTarget from the indexer for a given namespace and name.
func (s balancerTargetNamespaceLister) Get(name string) (*v1alpha1.BalancerTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("balancertarget"), name)
	}
	return obj.(*v1alpha1.BalancerTarget), nil
}
