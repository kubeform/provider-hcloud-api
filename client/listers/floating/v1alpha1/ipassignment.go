/*
Copyright AppsCode Inc. and Contributors

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "kubeform.dev/provider-hcloud-api/apis/floating/v1alpha1"

	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// IpAssignmentLister helps list IpAssignments.
// All objects returned here must be treated as read-only.
type IpAssignmentLister interface {
	// List lists all IpAssignments in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAssignment, err error)
	// IpAssignments returns an object that can list and get IpAssignments.
	IpAssignments(namespace string) IpAssignmentNamespaceLister
	IpAssignmentListerExpansion
}

// ipAssignmentLister implements the IpAssignmentLister interface.
type ipAssignmentLister struct {
	indexer cache.Indexer
}

// NewIpAssignmentLister returns a new IpAssignmentLister.
func NewIpAssignmentLister(indexer cache.Indexer) IpAssignmentLister {
	return &ipAssignmentLister{indexer: indexer}
}

// List lists all IpAssignments in the indexer.
func (s *ipAssignmentLister) List(selector labels.Selector) (ret []*v1alpha1.IpAssignment, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAssignment))
	})
	return ret, err
}

// IpAssignments returns an object that can list and get IpAssignments.
func (s *ipAssignmentLister) IpAssignments(namespace string) IpAssignmentNamespaceLister {
	return ipAssignmentNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// IpAssignmentNamespaceLister helps list and get IpAssignments.
// All objects returned here must be treated as read-only.
type IpAssignmentNamespaceLister interface {
	// List lists all IpAssignments in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.IpAssignment, err error)
	// Get retrieves the IpAssignment from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.IpAssignment, error)
	IpAssignmentNamespaceListerExpansion
}

// ipAssignmentNamespaceLister implements the IpAssignmentNamespaceLister
// interface.
type ipAssignmentNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all IpAssignments in the indexer for a given namespace.
func (s ipAssignmentNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.IpAssignment, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.IpAssignment))
	})
	return ret, err
}

// Get retrieves the IpAssignment from the indexer for a given namespace and name.
func (s ipAssignmentNamespaceLister) Get(name string) (*v1alpha1.IpAssignment, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("ipassignment"), name)
	}
	return obj.(*v1alpha1.IpAssignment), nil
}
